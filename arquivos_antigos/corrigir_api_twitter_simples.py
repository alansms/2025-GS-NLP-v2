#!/usr/bin/env python3
"""
Script simplificado para corrigir a autentica√ß√£o da API do Twitter
"""

import os
import json

# Diret√≥rio e arquivo de configura√ß√£o
CONFIG_DIR = 'config'
CONFIG_FILE = 'twitter_api.json'

def criar_config_manager():
    """Cria o m√≥dulo de gerenciamento de configura√ß√µes"""
    config_manager_content = """\"\"\"
M√≥dulo para salvar e carregar configura√ß√µes da API do Twitter
\"\"\"

import os
import json
import logging

# Configura√ß√£o de logging
logger = logging.getLogger(__name__)

def salvar_config_twitter(config):
    \"\"\"
    Salva configura√ß√µes da API do Twitter em um arquivo local
    
    Args:
        config (dict): Dicion√°rio com as configura√ß√µes
        
    Returns:
        bool: True se sucesso, False se falha
    \"\"\"
    try:
        # Verifica se o diret√≥rio existe
        config_dir = os.path.join(os.path.dirname(__file__), 'config')
        os.makedirs(config_dir, exist_ok=True)
        
        config_path = os.path.join(config_dir, 'twitter_api.json')
        
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2)
            
        return True
    except Exception as e:
        print(f"Erro ao salvar configura√ß√µes: {str(e)}")
        return False

def carregar_config_twitter():
    \"\"\"
    Carrega configura√ß√µes da API do Twitter do arquivo local
    
    Returns:
        dict: Configura√ß√µes ou None se n√£o encontrado
    \"\"\"
    try:
        config_path = os.path.join(os.path.dirname(__file__), 'config', 'twitter_api.json')
        
        if not os.path.exists(config_path):
            return None
            
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
            
        return config
    except Exception as e:
        print(f"Erro ao carregar configura√ß√µes: {str(e)}")
        return None
"""

    with open('config_manager.py', 'w', encoding='utf-8') as f:
        f.write(config_manager_content)

    print("‚úÖ M√≥dulo config_manager.py criado com sucesso")

def criar_diretorio_config():
    """Cria o diret√≥rio de configura√ß√£o se n√£o existir"""
    if not os.path.exists(CONFIG_DIR):
        print(f"Criando diret√≥rio de configura√ß√£o: {CONFIG_DIR}")
        os.makedirs(CONFIG_DIR, exist_ok=True)

def criar_patch_api_twitter():
    """Cria um patch para o arquivo app.py"""
    patch_content = """\"\"\"
Patch manual para corrigir o problema da API do Twitter
\"\"\"

import streamlit as st
from coleta_twitter_api import ConfigTwitter
from config_manager import salvar_config_twitter, carregar_config_twitter

# Carregar configura√ß√µes salvas
config_salva = carregar_config_twitter()

if config_salva:
    st.sidebar.success("‚úÖ Configura√ß√µes da API do Twitter carregadas do arquivo salvo!")
    
    # Usar as configura√ß√µes salvas
    config_twitter = ConfigTwitter(
        bearer_token=config_salva.get('bearer_token', ''),
        api_key=config_salva.get('api_key', ''),
        api_secret=config_salva.get('api_secret', ''),
        access_token=config_salva.get('access_token', ''),
        access_token_secret=config_salva.get('access_token_secret', '')
    )
    
    # Disponibilizar para o aplicativo
    st.session_state.config_twitter = config_twitter

# Interface para configurar API do Twitter
st.sidebar.subheader("üê¶ Configurar API do Twitter")
with st.sidebar.expander("Configura√ß√£o da API", expanded=not config_salva):
    bearer_token = st.text_input(
        "Bearer Token (Obrigat√≥rio para API v2)", 
        type="password",
        value=config_salva.get('bearer_token', '') if config_salva else ""
    )
    
    st.markdown("---")
    st.markdown("**Opcionais (n√£o necess√°rios se Bearer Token for fornecido):**")
    
    api_key = st.text_input("API Key", type="password", value=config_salva.get('api_key', '') if config_salva else "")
    api_secret = st.text_input("API Secret", type="password", value=config_salva.get('api_secret', '') if config_salva else "")
    access_token = st.text_input("Access Token", type="password", value=config_salva.get('access_token', '') if config_salva else "")
    access_secret = st.text_input("Access Token Secret", type="password", value=config_salva.get('access_token_secret', '') if config_salva else "")
    
    if st.button("Salvar configura√ß√µes"):
        if bearer_token:
            # Criar configura√ß√£o
            config_twitter = ConfigTwitter(
                bearer_token=bearer_token,
                api_key=api_key,
                api_secret=api_secret,
                access_token=access_token,
                access_token_secret=access_secret
            )
            
            # Salvar na sess√£o
            st.session_state.config_twitter = config_twitter
            
            # Salvar em arquivo
            config_dict = {
                'bearer_token': bearer_token,
                'api_key': api_key,
                'api_secret': api_secret,
                'access_token': access_token,
                'access_token_secret': access_secret
            }
            
            if salvar_config_twitter(config_dict):
                st.success("‚úÖ Configura√ß√µes salvas com sucesso! N√£o ser√° necess√°rio digit√°-las novamente.")
            else:
                st.warning("‚ö†Ô∏è Configura√ß√µes aplicadas, mas n√£o foi poss√≠vel salv√°-las permanentemente.")
        else:
            st.error("‚ùå O Bearer Token √© obrigat√≥rio para a API v2 do Twitter.")
"""

    with open('patch_api_twitter.py', 'w', encoding='utf-8') as f:
        f.write(patch_content)

    print("‚úÖ Patch para a API do Twitter criado com sucesso")

def criar_instrucoes():
    """Cria um arquivo de instru√ß√µes"""
    instrucoes = """# Instru√ß√µes para Corrigir a API do Twitter

Para corrigir o problema da API do Twitter e permitir que as configura√ß√µes sejam salvas:

1. Certifique-se de que os arquivos `config_manager.py` e `patch_api_twitter.py` foram criados
2. Adicione a seguinte linha ao in√≠cio do arquivo `app.py`, logo ap√≥s as importa√ß√µes:
   ```python
   from config_manager import salvar_config_twitter, carregar_config_twitter
   ```

3. Para uma solu√ß√£o r√°pida, voc√™ pode adicionar a seguinte linha no seu arquivo `app.py` dentro da fun√ß√£o `construir_interface`, logo ap√≥s a defini√ß√£o da barra lateral:
   ```python
   # Adicionar patch para API do Twitter
   import patch_api_twitter
   ```

4. Reinicie a aplica√ß√£o para ver as mudan√ßas

## Como obter o Bearer Token do Twitter

1. Acesse o portal de desenvolvedores do Twitter: https://developer.twitter.com/
2. Fa√ßa login e acesse seu projeto (ou crie um novo)
3. No menu do projeto, acesse "Keys and tokens"
4. Voc√™ encontrar√° o Bearer Token na se√ß√£o "Authentication Tokens"
5. Copie o Bearer Token e cole no campo correspondente da interface

Observa√ß√£o: O Bearer Token √© essencial para usar a API v2 do Twitter, que √© a vers√£o atual da API.
"""

    with open('corrigir_api_twitter_instrucoes.md', 'w', encoding='utf-8') as f:
        f.write(instrucoes)

    print("‚úÖ Instru√ß√µes criadas com sucesso")

def main():
    """Fun√ß√£o principal"""
    print("üîÑ Script simplificado para corrigir autentica√ß√£o da API do Twitter iniciado")

    # Criar o diret√≥rio de configura√ß√£o
    criar_diretorio_config()

    # Criar o m√≥dulo de gerenciamento de configura√ß√µes
    criar_config_manager()

    # Criar o patch para a API do Twitter
    criar_patch_api_twitter()

    # Criar instru√ß√µes
    criar_instrucoes()

    print("\n‚úÖ Opera√ß√£o conclu√≠da!")
    print("Siga as instru√ß√µes no arquivo 'corrigir_api_twitter_instrucoes.md' para aplicar as corre√ß√µes.")

if __name__ == "__main__":
    main()
