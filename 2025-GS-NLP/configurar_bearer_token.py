#!/usr/bin/env python3
"""
Patch direto para adicionar o campo Bearer Token na barra lateral
Este script √© executado independentemente do app.py
"""

import streamlit as st
import os
import json
from coleta_twitter_api import ConfigTwitter

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Configura√ß√£o Twitter API", page_icon="üê¶", layout="wide")

st.title("üê¶ Configura√ß√£o da API do Twitter")
st.markdown("""
Este utilit√°rio configura o Bearer Token para a API do Twitter.
Ap√≥s configurar, reinicie a aplica√ß√£o principal.
""")

# Verifica se existe configura√ß√£o salva
config_salva = None
config_path = os.path.join('config', 'twitter_api.json')
if os.path.exists(config_path):
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config_salva = json.load(f)
        st.success("‚úÖ Configura√ß√£o existente carregada!")
    except Exception as e:
        st.error(f"Erro ao carregar configura√ß√£o: {str(e)}")

# Interface simplificada apenas com Bearer Token
st.subheader("Bearer Token")
st.markdown("O Bearer Token √© obrigat√≥rio para usar a API v2 do Twitter.")

bearer_token = st.text_input(
    "Bearer Token (obrigat√≥rio)",
    type="password",
    value=config_salva.get('bearer_token', '') if config_salva else ""
)

if st.button("Salvar configura√ß√£o"):
    if bearer_token:
        try:
            # Criar diret√≥rio se n√£o existir
            os.makedirs('config', exist_ok=True)

            # Criar configura√ß√£o
            config_dict = {
                'bearer_token': bearer_token,
                'api_key': "",
                'api_secret': "",
                'access_token': "",
                'access_token_secret': ""
            }

            # Salvar em arquivo
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config_dict, f, ensure_ascii=False, indent=2)

            st.success("‚úÖ Bearer Token salvo com sucesso!")
            st.info("Agora voc√™ pode fechar esta janela e reiniciar a aplica√ß√£o principal.")

        except Exception as e:
            st.error(f"Erro ao salvar configura√ß√£o: {str(e)}")
    else:
        st.error("‚ùå O Bearer Token √© obrigat√≥rio.")

# Exibir instru√ß√µes
st.markdown("---")
st.subheader("Como obter um Bearer Token")
st.markdown("""
1. Acesse [Twitter Developer Portal](https://developer.twitter.com/en/portal/dashboard)
2. Crie um projeto e um aplicativo
3. No painel do aplicativo, v√° para "Keys and tokens"
4. Gere ou copie o Bearer Token
5. Cole o token no campo acima
""")

# Status da configura√ß√£o
st.markdown("---")
st.subheader("Status da configura√ß√£o")

if config_salva and config_salva.get('bearer_token'):
    st.success("‚úÖ Bearer Token configurado")
    # Mostra apenas os primeiros 5 caracteres por seguran√ßa
    token_preview = config_salva.get('bearer_token')[:5] + "..." if config_salva.get('bearer_token') else ""
    st.info(f"Bearer Token: {token_preview}...")
else:
    st.warning("‚ö†Ô∏è Bearer Token n√£o configurado")
